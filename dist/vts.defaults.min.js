/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/vts.defaults.js":
/*!*****************************!*\
  !*** ./src/vts.defaults.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\r\n\r\n/**\r\n * Global default configuration for Vts (Validate Then Submit).\r\n * @memberof Vts\r\n * @type {Object}\r\n */\r\nconst vtsDefaults = {\r\n  /**\r\n   * Ajax settings\r\n   */\r\n  ajax: {\r\n    request: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n    /**\r\n     * Ajax beforeSend callback function\r\n     * @param {XMLHttpRequest} xhr - The XMLHttpRequest object\r\n     */\r\n    beforeSend: (xhr) => {},\r\n\r\n    /**\r\n     * Ajax complete callback function\r\n     * @param {XMLHttpRequest} xhr - The XMLHttpRequest object\r\n     * @param {string} textStatus - The status of the request (\"success\", \"error\", \"timeout\", etc.)\r\n     */\r\n    complete: (xhr, textStatus) => {},\r\n\r\n    /**\r\n     * ajax error\r\n     * @param {object} jqXHR\r\n     * @param {String} textStatus\r\n     * @param {String} errorThrown\r\n     */\r\n    error: (error, raw) => {\r\n      console.table(raw);\r\n      alert(error || raw);\r\n      // const customError = jqXHR.responseJSON;\r\n      // const hasCustomError =\r\n      //   'responseJSON' in jqXHR && 'title' in jqXHR.responseJSON;\r\n      // const html = hasCustomError ? customError.text : errorThrown;\r\n      // let cLog = jqXHR.responseText;\r\n\r\n      // let title = hasCustomError\r\n      //   ? customError.title\r\n      //   : textStatus + ': ' + jqXHR.status;\r\n      // if (jqXHR.status === 0) {\r\n      //   title = cLog = 'Please check your connection.';\r\n      // }\r\n      // const text = title + '\\nClick ok to view more details.' + '\\n' + html;\r\n      // if (confirm(text) == true) {\r\n      //   const newWindow = window.open();\r\n      //   newWindow.document.body.innerHTML = cLog;\r\n      // }\r\n      // console.log(cLog);\r\n    },\r\n    /**\r\n     * ajax success\r\n     * @param {object} data\r\n     * @param {object} response\r\n     */\r\n    success: (data, response) => {\r\n      alert(data.title + ':\\n' + data.text);\r\n    },\r\n  },\r\n  /**\r\n   * the classes to be applied on the validated field\r\n   */\r\n  class: {\r\n    /**\r\n     * @type {String}\r\n     */\r\n    valid: 'valid',\r\n    /**\r\n     * @type {String}\r\n     */\r\n    invalid: 'invalid',\r\n  },\r\n  /**\r\n   * Stops the form's submission.\r\n   * @type {Boolean}\r\n   */\r\n  halt: false,\r\n  /**\r\n   * A function to be called if the field is invalid.\r\n   * @param {HTMLElement} currentField\r\n   * @param {String} label\r\n   */\r\n  fnInvalid: (currentField, label, title, message) => {\r\n    currentField.focus();\r\n    currentField.style.border = '1px solid red';\r\n    alert(title + '\\n' + message);\r\n  },\r\n  log: false,\r\n  /**\r\n   * The validation mode.\r\n   * The \"each\" mode will stop the validation if the current field is invalid.\r\n   * The \"all\" mode will continue the validation until all fields have been checked.\r\n   * Fields are validated in the same order as their DOM declaration.\r\n   * @type {String}\r\n   * @default 'each'\r\n   */\r\n  mode: 'each',\r\n  /**\r\n   * regular expressions\r\n   * @type {Object}\r\n   */\r\n  rules: {},\r\n\r\n  /**\r\n   * A function to be called if the field is invalid.\r\n   * @param {HTMLElement} currentField\r\n   * @param {String} label\r\n   */\r\n  fnValid: function (currentField) {\r\n    currentField.style.border = '1px solid green';\r\n  },\r\n};\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (vtsDefaults);\r\n\n\n//# sourceURL=webpack:///./src/vts.defaults.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/vts.defaults.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;